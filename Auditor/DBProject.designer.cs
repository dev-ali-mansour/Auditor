#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Auditor
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="Auditor")]
	public partial class DBProjectDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertProject(Project instance);
    partial void UpdateProject(Project instance);
    partial void DeleteProject(Project instance);
    #endregion
		
		public DBProjectDataContext() : 
				base(global::Auditor.Properties.Settings.Default.AuditorConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DBProjectDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBProjectDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBProjectDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBProjectDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Project> Projects
		{
			get
			{
				return this.GetTable<Project>();
			}
		}
	}
	
	[Table(Name="dbo.Project")]
	public partial class Project : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProjectID;
		
		private System.Nullable<int> _LocationID;
		
		private System.Nullable<int> _ContractorID;
		
		private string _ExcuteOrder;
		
		private string _predicationOrder;
		
		private System.Nullable<int> _DocNo;
		
		private System.Nullable<System.DateTime> _DocDate;
		
		private System.Nullable<System.DateTime> _StartDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private System.Data.Linq.Binary _Name;
		
		private System.Nullable<decimal> _Value;
		
		private System.Nullable<System.DateTime> _PayDate;
		
		private System.Nullable<double> _TaxRate;
		
		private System.Nullable<decimal> _TaxValue;
		
		private System.Nullable<double> _TransFeesRate;
		
		private System.Nullable<decimal> _TransFeesValue;
		
		private System.Nullable<double> _InsuranceRate;
		
		private System.Nullable<decimal> _InsuranceValue;
		
		private System.Nullable<double> _ReservedRate;
		
		private System.Nullable<decimal> _ReservedValue;
		
		private System.Data.Linq.Binary _Case;
		
		private System.Nullable<decimal> _BusinessFees;
		
		private System.Nullable<decimal> _TotalDiscount;
		
		private System.Nullable<decimal> _NetAmount;
		
		private string _Notes;
		
		private System.Nullable<int> _EmployeeID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProjectIDChanging(int value);
    partial void OnProjectIDChanged();
    partial void OnLocationIDChanging(System.Nullable<int> value);
    partial void OnLocationIDChanged();
    partial void OnContractorIDChanging(System.Nullable<int> value);
    partial void OnContractorIDChanged();
    partial void OnExcuteOrderChanging(string value);
    partial void OnExcuteOrderChanged();
    partial void OnpredicationOrderChanging(string value);
    partial void OnpredicationOrderChanged();
    partial void OnDocNoChanging(System.Nullable<int> value);
    partial void OnDocNoChanged();
    partial void OnDocDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDocDateChanged();
    partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    partial void OnNameChanging(System.Data.Linq.Binary value);
    partial void OnNameChanged();
    partial void OnValueChanging(System.Nullable<decimal> value);
    partial void OnValueChanged();
    partial void OnPayDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPayDateChanged();
    partial void OnTaxRateChanging(System.Nullable<double> value);
    partial void OnTaxRateChanged();
    partial void OnTaxValueChanging(System.Nullable<decimal> value);
    partial void OnTaxValueChanged();
    partial void OnTransFeesRateChanging(System.Nullable<double> value);
    partial void OnTransFeesRateChanged();
    partial void OnTransFeesValueChanging(System.Nullable<decimal> value);
    partial void OnTransFeesValueChanged();
    partial void OnInsuranceRateChanging(System.Nullable<double> value);
    partial void OnInsuranceRateChanged();
    partial void OnInsuranceValueChanging(System.Nullable<decimal> value);
    partial void OnInsuranceValueChanged();
    partial void OnReservedRateChanging(System.Nullable<double> value);
    partial void OnReservedRateChanged();
    partial void OnReservedValueChanging(System.Nullable<decimal> value);
    partial void OnReservedValueChanged();
    partial void OnCaseChanging(System.Data.Linq.Binary value);
    partial void OnCaseChanged();
    partial void OnBusinessFeesChanging(System.Nullable<decimal> value);
    partial void OnBusinessFeesChanged();
    partial void OnTotalDiscountChanging(System.Nullable<decimal> value);
    partial void OnTotalDiscountChanged();
    partial void OnNetAmountChanging(System.Nullable<decimal> value);
    partial void OnNetAmountChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnEmployeeIDChanging(System.Nullable<int> value);
    partial void OnEmployeeIDChanged();
    #endregion
		
		public Project()
		{
			OnCreated();
		}
		
		[Column(Storage="_ProjectID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[Column(Storage="_LocationID", DbType="Int")]
		public System.Nullable<int> LocationID
		{
			get
			{
				return this._LocationID;
			}
			set
			{
				if ((this._LocationID != value))
				{
					this.OnLocationIDChanging(value);
					this.SendPropertyChanging();
					this._LocationID = value;
					this.SendPropertyChanged("LocationID");
					this.OnLocationIDChanged();
				}
			}
		}
		
		[Column(Storage="_ContractorID", DbType="Int")]
		public System.Nullable<int> ContractorID
		{
			get
			{
				return this._ContractorID;
			}
			set
			{
				if ((this._ContractorID != value))
				{
					this.OnContractorIDChanging(value);
					this.SendPropertyChanging();
					this._ContractorID = value;
					this.SendPropertyChanged("ContractorID");
					this.OnContractorIDChanged();
				}
			}
		}
		
		[Column(Storage="_ExcuteOrder", DbType="VarChar(50)")]
		public string ExcuteOrder
		{
			get
			{
				return this._ExcuteOrder;
			}
			set
			{
				if ((this._ExcuteOrder != value))
				{
					this.OnExcuteOrderChanging(value);
					this.SendPropertyChanging();
					this._ExcuteOrder = value;
					this.SendPropertyChanged("ExcuteOrder");
					this.OnExcuteOrderChanged();
				}
			}
		}
		
		[Column(Storage="_predicationOrder", DbType="VarChar(50)")]
		public string predicationOrder
		{
			get
			{
				return this._predicationOrder;
			}
			set
			{
				if ((this._predicationOrder != value))
				{
					this.OnpredicationOrderChanging(value);
					this.SendPropertyChanging();
					this._predicationOrder = value;
					this.SendPropertyChanged("predicationOrder");
					this.OnpredicationOrderChanged();
				}
			}
		}
		
		[Column(Storage="_DocNo", DbType="Int")]
		public System.Nullable<int> DocNo
		{
			get
			{
				return this._DocNo;
			}
			set
			{
				if ((this._DocNo != value))
				{
					this.OnDocNoChanging(value);
					this.SendPropertyChanging();
					this._DocNo = value;
					this.SendPropertyChanged("DocNo");
					this.OnDocNoChanged();
				}
			}
		}
		
		[Column(Storage="_DocDate", DbType="Date")]
		public System.Nullable<System.DateTime> DocDate
		{
			get
			{
				return this._DocDate;
			}
			set
			{
				if ((this._DocDate != value))
				{
					this.OnDocDateChanging(value);
					this.SendPropertyChanging();
					this._DocDate = value;
					this.SendPropertyChanged("DocDate");
					this.OnDocDateChanged();
				}
			}
		}
		
		[Column(Storage="_StartDate", DbType="Date")]
		public System.Nullable<System.DateTime> StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[Column(Storage="_EndDate", DbType="Date")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarBinary(250)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Value", DbType="Money")]
		public System.Nullable<decimal> Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[Column(Storage="_PayDate", DbType="Date")]
		public System.Nullable<System.DateTime> PayDate
		{
			get
			{
				return this._PayDate;
			}
			set
			{
				if ((this._PayDate != value))
				{
					this.OnPayDateChanging(value);
					this.SendPropertyChanging();
					this._PayDate = value;
					this.SendPropertyChanged("PayDate");
					this.OnPayDateChanged();
				}
			}
		}
		
		[Column(Storage="_TaxRate", DbType="Float")]
		public System.Nullable<double> TaxRate
		{
			get
			{
				return this._TaxRate;
			}
			set
			{
				if ((this._TaxRate != value))
				{
					this.OnTaxRateChanging(value);
					this.SendPropertyChanging();
					this._TaxRate = value;
					this.SendPropertyChanged("TaxRate");
					this.OnTaxRateChanged();
				}
			}
		}
		
		[Column(Storage="_TaxValue", DbType="Money")]
		public System.Nullable<decimal> TaxValue
		{
			get
			{
				return this._TaxValue;
			}
			set
			{
				if ((this._TaxValue != value))
				{
					this.OnTaxValueChanging(value);
					this.SendPropertyChanging();
					this._TaxValue = value;
					this.SendPropertyChanged("TaxValue");
					this.OnTaxValueChanged();
				}
			}
		}
		
		[Column(Storage="_TransFeesRate", DbType="Float")]
		public System.Nullable<double> TransFeesRate
		{
			get
			{
				return this._TransFeesRate;
			}
			set
			{
				if ((this._TransFeesRate != value))
				{
					this.OnTransFeesRateChanging(value);
					this.SendPropertyChanging();
					this._TransFeesRate = value;
					this.SendPropertyChanged("TransFeesRate");
					this.OnTransFeesRateChanged();
				}
			}
		}
		
		[Column(Storage="_TransFeesValue", DbType="Money")]
		public System.Nullable<decimal> TransFeesValue
		{
			get
			{
				return this._TransFeesValue;
			}
			set
			{
				if ((this._TransFeesValue != value))
				{
					this.OnTransFeesValueChanging(value);
					this.SendPropertyChanging();
					this._TransFeesValue = value;
					this.SendPropertyChanged("TransFeesValue");
					this.OnTransFeesValueChanged();
				}
			}
		}
		
		[Column(Storage="_InsuranceRate", DbType="Float")]
		public System.Nullable<double> InsuranceRate
		{
			get
			{
				return this._InsuranceRate;
			}
			set
			{
				if ((this._InsuranceRate != value))
				{
					this.OnInsuranceRateChanging(value);
					this.SendPropertyChanging();
					this._InsuranceRate = value;
					this.SendPropertyChanged("InsuranceRate");
					this.OnInsuranceRateChanged();
				}
			}
		}
		
		[Column(Storage="_InsuranceValue", DbType="Money")]
		public System.Nullable<decimal> InsuranceValue
		{
			get
			{
				return this._InsuranceValue;
			}
			set
			{
				if ((this._InsuranceValue != value))
				{
					this.OnInsuranceValueChanging(value);
					this.SendPropertyChanging();
					this._InsuranceValue = value;
					this.SendPropertyChanged("InsuranceValue");
					this.OnInsuranceValueChanged();
				}
			}
		}
		
		[Column(Storage="_ReservedRate", DbType="Float")]
		public System.Nullable<double> ReservedRate
		{
			get
			{
				return this._ReservedRate;
			}
			set
			{
				if ((this._ReservedRate != value))
				{
					this.OnReservedRateChanging(value);
					this.SendPropertyChanging();
					this._ReservedRate = value;
					this.SendPropertyChanged("ReservedRate");
					this.OnReservedRateChanged();
				}
			}
		}
		
		[Column(Storage="_ReservedValue", DbType="Money")]
		public System.Nullable<decimal> ReservedValue
		{
			get
			{
				return this._ReservedValue;
			}
			set
			{
				if ((this._ReservedValue != value))
				{
					this.OnReservedValueChanging(value);
					this.SendPropertyChanging();
					this._ReservedValue = value;
					this.SendPropertyChanged("ReservedValue");
					this.OnReservedValueChanged();
				}
			}
		}
		
		[Column(Name="[Case]", Storage="_Case", DbType="VarBinary(50)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Case
		{
			get
			{
				return this._Case;
			}
			set
			{
				if ((this._Case != value))
				{
					this.OnCaseChanging(value);
					this.SendPropertyChanging();
					this._Case = value;
					this.SendPropertyChanged("Case");
					this.OnCaseChanged();
				}
			}
		}
		
		[Column(Storage="_BusinessFees", DbType="Money")]
		public System.Nullable<decimal> BusinessFees
		{
			get
			{
				return this._BusinessFees;
			}
			set
			{
				if ((this._BusinessFees != value))
				{
					this.OnBusinessFeesChanging(value);
					this.SendPropertyChanging();
					this._BusinessFees = value;
					this.SendPropertyChanged("BusinessFees");
					this.OnBusinessFeesChanged();
				}
			}
		}
		
		[Column(Storage="_TotalDiscount", DbType="Money")]
		public System.Nullable<decimal> TotalDiscount
		{
			get
			{
				return this._TotalDiscount;
			}
			set
			{
				if ((this._TotalDiscount != value))
				{
					this.OnTotalDiscountChanging(value);
					this.SendPropertyChanging();
					this._TotalDiscount = value;
					this.SendPropertyChanged("TotalDiscount");
					this.OnTotalDiscountChanged();
				}
			}
		}
		
		[Column(Storage="_NetAmount", DbType="Money")]
		public System.Nullable<decimal> NetAmount
		{
			get
			{
				return this._NetAmount;
			}
			set
			{
				if ((this._NetAmount != value))
				{
					this.OnNetAmountChanging(value);
					this.SendPropertyChanging();
					this._NetAmount = value;
					this.SendPropertyChanged("NetAmount");
					this.OnNetAmountChanged();
				}
			}
		}
		
		[Column(Storage="_Notes", DbType="VarChar(300)")]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[Column(Storage="_EmployeeID", DbType="Int")]
		public System.Nullable<int> EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
